package com.mhf.dao;

import com.mhf.pojo.User;
import org.apache.ibatis.annotations.Param;

import java.util.List;

public interface UserMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbg.generated
     */
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbg.generated
     */
    int insert(User record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbg.generated
     */
    User selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbg.generated
     */
    List<User> selectAll();

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbg.generated
     */
    int updateByPrimaryKey(User record);

    /**
     * 检查用户名是否存在
     */
    int checkUsername(String username);

    /**
     * 检查手机号是否存在
     */
    int checkPhone(String phone);

    /**
     * 根据用户名密码查询用户信息
     */
    User selectUserByUsernameAndPassword(@Param("username") String username,
                                         @Param("password") String password);

    /**
     * 检查邮箱是否存在
     */
    int checkEmail(String email);

    /**
     * 根据用户名查询密保问题
     */
    String selectQuestionByUsername(String username);

    /**
     * 验证密保答案
     */
    int checkAnswer(@Param("username") String username,@Param("question") String question,
                                        @Param("answer") String answer);

    /**
     * 修改用户密码
     */
    int updatePassword(@Param("username") String username,@Param("password") String password);

    /**
     * 更新用户信息
     */
    int updateInformation(User user);

    /**
     * 保存用户token信息
     */
    int saveTokenByUserId(@Param("userId")Integer userId,@Param("token")String token);

    /**
     * 根据token查询用户信息
     */
    User findUserByToken(String token);

    /**
     * 修改用户对应token为空
     */
    Integer updateTokenByUserId(User user);

    /**
     * 根据手机号密码查找信息
     */
    User selectUserByPhoneAndPassword(String username, String password);

    /**
     * 检查用户名或手机号是否存在
     */
    int checkUsernameOrPhone(String username);
    /**
     * 根据用户名或手机号-密码查找信息
     */
    User selectUserByUsernameOrPhoneAndPassword(@Param("username") String username,
                                                @Param("password") String password);

    /**
     * 根据手机号查找信息
     */
    User selectUserByPhone(String phone);

    /**
     * 通过手机验证码修改用户密码
     */
    int updatePasswordByPhone(@Param("phone") String phone,
                              @Param("password") String password);
}